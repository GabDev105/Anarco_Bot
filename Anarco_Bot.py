#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This program is dedicated to the public domain under the CC0 license.

"""
Bot para responder certas quest√µes sobre Libertarianismo.

Primeiro, algumas fun√ß√µes do manipulador s√£o definidas. Em seguida, essas fun√ß√µes s√£o passadas para
expedidor e registrado em seus respectivos locais.
Em seguida, o bot √© iniciado e executado at√© pressionar Ctrl-C na linha de comando.

Uso:
Responde comandos j√° estabelecidos.
Pressione Ctrl-C na linha de comando ou envie um sinal ao processo para interromper o
rob√¥.
"""

import logging

from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments update and
# context. Error handlers also receive the raised TelegramError object in error.
def start(update, context):
    """Send a message when the command /start is issued."""
    update.message.reply_text("Ol√°! Meu nome √© AnarcoBot‚í∂.\n"
    "Meu objetivo √© descentralizar a informa√ß√£o dispersa sobre o Libertarianismo.\n" 
    "Estou aqui para ajud√°-lo se tiver d√∫vidas sob o tema!\n"
    "Tenho muitos comandos √∫teis e um fluxograma para acabar com as perguntas:\n"
    "\n" 
    "'¬øMas, sem o estado quem faria as estradas?'\n"
    "'¬øQuem forneceria sa√∫de, educa√ß√£o e seguran√ßa?'\n"
    "\n"
    "Para inicar meus comandos, clique em /help\n"
    "Salve galera, tmjüêç.")


def help_command(update, context):
    """Send a message when the command /help is issued."""
    update.message.reply_text("/Defs: Mostrar lista de comandos de termos libert√°rios e suas respectivas defini√ß√µes.\n"
"/QuemFaria: Iniciar fluxograma sobre a produ√ß√£o de qualquer servi√ßo ou mercadoria.\n"
"/Cryptos: Mostrar comandos com resumos breves de criptomoedas com utilidade para o nosso agorismo do dia a dia.\n"
"/Canais: Mostrar uma quantidade sustancial de canais de vi√©s libert√°rio.\n"
"/Livros: Recomenda√ß√µes de leituras para iniciar no Libertarianismo.\n"
"/About: Mostrar mais informa√ß√µes sobre o processo e apoio no desenvolvimento do bot.\n")





def main():
    """Start the bot."""
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater("1173665239:AAEmGc8HMTq3J5EmDLN_75g2cfar55co7Ok", use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))


    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
